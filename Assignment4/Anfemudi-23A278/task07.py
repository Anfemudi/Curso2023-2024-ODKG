# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e-k3i6-ObkRhavPBn5jdq8d6u0ceGewY

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = {"ns": ns}
)

for r in g.query(q1):
  print(r.Subject)

for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?class rdfs:subClassOf* ns:Person.
    ?Subject rdf:type ?class.
  }
  ''',
  initNs = {"ns": ns}
)

for r in g.query(q1):
  print(r.Subject)

for s,p,o in g.triples((None, RDFS.subClassOf, ns.person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s)):
    print(s)

# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

print("RDFLib Person")

for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for s1, p1, o1 in g.triples((s, None, None)):
    print(s1, p1, o)

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1, p1, o1 in g.triples((None, RDF.type, s)):
    for s2, p2, o2 in g.triples((s1, None, None)):
      print(s2, p2, s)


print("RDFLib Animal")

for s, p, o in g.triples((None, RDF.type, ns.Animal)):
  for s1, p1, o1 in g.triples((s, None, None)):
    print(s1, p1, o)

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Animal)):
  for s1, p1, o1 in g.triples((None, RDF.type, s)):
    for s2, p2, o2 in g.triples((s1, None, None)):
      print(s2, p2, s)

print("-------------")
print("-------------")
print("SPARQL Person")

q1 = prepareQuery('''
  SELECT ?Subject ?p ?class WHERE {
    ?class rdfs:subClassOf* ns:Person.
    ?Subject rdf:type ?class.
    ?Subject ?p ?o.
  }
  ''',
  initNs = { "ns": ns}
)

# Visualize the results
for r in g.query(q1):
  print(r)

print("SPARQL Animal")
q2 = prepareQuery('''
  SELECT ?Subject ?p ?class WHERE {
    ?class rdfs:subClassOf* ns:Animal.
    ?Subject rdf:type ?class.
    ?Subject ?p ?o.
  }
  ''',
  initNs = { "ns": ns}
)

# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

from rdflib import FOAF

q1 = prepareQuery('''
  SELECT  ?Subject WHERE {
    ?Subject foaf:knows ?RockySmith.
  }
  ''',
  initNs = { "foaf": FOAF}
)

for r in g.query(q1):
  print(r.Subject)


  from rdflib import FOAF

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results